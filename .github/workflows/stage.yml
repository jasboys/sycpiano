name: Deploy Website to Staging

on:
  push:
    branches: [ "deploy" ]

jobs:
  check-cache:
    runs-on: ubuntu-latest
    outputs:
      admin-matched: ${{ steps.first-check.outputs.admin || steps.second-check.outputs.admin }}
      web-matched: ${{ steps.first-check.outputs.web || steps.second-check.outputs.web }}
      assets-matched: ${{ steps.first-check.outputs.assets || steps.second-check.outputs.assets }}
      server-matched: ${{ steps.first-check.outputs.server || steps.second-check.outputs.server }}
      admin-hash: ${{ steps.compute-hashes.outputs.admin }}
      web-hash: ${{ steps.compute-hashes.outputs.web }}
      assets-hash: ${{ steps.compute-hashes.outputs.assets }}
      server-hash: ${{ steps.compute-hashes.outputs.server }}
      checksum: ${{ steps.compute-hashes.outputs.checksum }}
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compute new hashes
        id: compute-hashes
        run: |
          echo "admin=$ADMIN" >> $GITHUB_OUTPUT
          echo "web=$WEB" >> $GITHUB_OUTPUT
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT
          echo "checksum=$(echo -n $ADMIN$WEB$SERVER$ASSETS | sha256sum | cut -f 1 -d ' ')" >> $GITHUB_OUTPUT
        env:
          ADMIN: ${{ hashFiles('packages/admin/**', 'yarn.lock') }}
          WEB: ${{ hashFiles('packages/web/**', 'yarn.lock') }}
          SERVER: ${{ hashFiles('packages/server/**', 'yarn.lock') }}
          ASSETS: ${{ hashFiles('assets/**', 'yarn.lock') }}
      - name: Get Cached Hashes
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: .cache
          key: hashes-${{ steps.compute-hashes.outputs.checksum }}
          restore-keys: |
            hashes-
      - name: Handle Cache Found
        id: first-check
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "admin=true" >> $GITHUB_OUTPUT
          echo "web=true" >> $GITHUB_OUTPUT
          echo "assets=true" >> $GITHUB_OUTPUT
          echo "server=true" >> $GITHUB_OUTPUT
      - name: Get cached hashes
        id: get-hashes
        if: steps.cache.outputs.cache-hit == 'false' && steps.cache.outputs.cache-matched-key != ''
        run: |
          echo "admin=$(cat $HASH_FILE | jq '.admin')" >> $GITHUB_OUTPUT
          echo "web=$(cat $HASH_FILE | jq '.web')" >> $GITHUB_OUTPUT
          echo "server=$(cat $HASH_FILE | jq '.server')" >> $GITHUB_OUTPUT
          echo "assets=$(cat $HASH_FILE | jq '.assets')" >> $GITHUB_OUTPUT
        env:
          HASH_FILE: .cache/hashes
      - name: Handle yes Cache
        id: second-check
        if: steps.cache.outputs.cache-hit == 'false' && steps.cache.outputs.cache-matched-key != ''
        run: |
          echo "admin=$ADMIN" >> $GITHUB_OUTPUT
          echo "web=$WEB" >> $GITHUB_OUTPUT
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT
        env:
          ADMIN: ${{ steps.compute-hashes.outputs.admin == steps.get-hashes.outputs.admin }}
          WEB: ${{ steps.compute-hashes.outputs.web == steps.get-hashes.outputs.web }}
          SERVER: ${{ steps.compute-hashes.outputs.server == steps.get-hashes.outputs.server }}
          ASSETS: ${{ steps.compute-hashes.outputs.assets == steps.get-hashes.outputs.assets }}
      # - name: Write Cache
      #   run: |
      #     mkdir -p .cache
      #     cat > .cache/hashes << EOF
      #     {
      #       "admin": "$ADMIN",
      #       "web": "$WEB",
      #       "server": "$SERVER",
      #       "assets": "$ASSETS"
      #     }
      #     EOF
      #   env:
      #     ADMIN: ${{ steps.compute-hashes.outputs.admin }}
      #     WEB: ${{ steps.compute-hashes.outputs.web }}
      #     SERVER: ${{ steps.compute-hashes.outputs.server }}
      #     ASSETS: ${{ steps.compute-hashes.outputs.assets }}
      # - name: Save Cache
      #   uses: actions/cache/save@v3
      #   with:
      #     path: .cache
      #     key: hashes-${{ steps.compute-hashes.outputs.checksum }}

  assets:
    runs-on: ubuntu-latest
    needs: check-cache
    if: needs.check-cache.outputs.assets-matched != 'true'
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh
        with:
          ssh-key: ${{ secrets.SSH_ED25519 }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-user: ${{ secrets.SSH_USER }}
      - name: Rsync Assets
        if: ${{ vars.ASSETS_DIR != '' }}
        run: |
          rsync -rpivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx --files-from=$SYNC_FILE_LIST $SRC server:$DEST
        env:
          SYNC_FILE_LIST: ${{ github.workspace }}/rsync-assets-list
          SRC: ${{ github.workspace }}/assets
          DEST: ${{ vars.ASSETS_DIR }}
  #     - name: Install Deps and Build
  #       run: |
  #         yarn
  #         yarn build
  #       env: 
  #         GAPI_KEY_APP: ${{ secrets.GAPI_KEY_APP }}
  #         PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
  #         STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
  #     - name: Rsync Admin Scripts and HTML
  #       if: ${{ vars.HTML_DEST != '' && vars.ADMIN_DEST != '' }}
  #       run: |
  #         rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
  #         rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
  #       env:
  #         SCRIPT_SRC: ./packages/admin/build/static/scripts/admin/
  #         SCRIPT_DEST: ${{ vars.ADMIN_DEST }}
  #         HTML_SRC: ./packages/admin/build/admin.html
  #         HTML_DEST: ${{ vars.HTML_DEST }}
  #     - name: RSync Web Scripts and HTML
  #       if: ${{ vars.HTML_DEST != '' && vars.WEB_DEST != '' }}
  #       run: |
  #         rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
  #         rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
  #       env:
  #         SCRIPT_SRC: ./packages/web/build/static/scripts/web/
  #         SCRIPT_DEST: ${{ vars.WEB_DEST }}
  #         HTML_SRC: ./packages/web/build/index.html
  #         HTML_DEST: ${{ vars.HTML_DEST }}
  #     - name: Rsync Server Build Artifacts
  #       if: ${{ vars.BACKEND_DIR != '' }}
  #       run: |
  #         rsync --delete -rpivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx --files-from=$SYNC_FILE_LIST --exclude=.env $SRC server:$DEST
  #       env:
  #         SYNC_FILE_LIST: ${{ format('{0}/rsync-server-list', github.workspace) }}
  #         SRC: ${{ github.workspace }}
  #         DEST: ${{ vars.BACKEND_DIR }}
  #     - name: Install Deps on Server
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && yarn workspaces focus server --production', vars.BACKEND_DIR) }}
  #     - name: Migrate Up
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && dbmate -d ./packages/server/migrations up', vars.BACKEND_DIR) }}
  #     - name: PM2 Start App
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && pm2 start ecosystem.config.cjs', vars.BACKEND_DIR) }}


  admin:
    runs-on: ubuntu-latest
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    needs: check-cache
    if: needs.check-cache.outputs.admin-matched != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node and Common
        uses: ./.github/actions/setup-node-and-common
        with:
          node-version: 20.x
      - name: Admin Install Deps and Build
        run: |
          yarn workspaces focus admin
          yarn workspace admin build
        env:
          GAPI_KEY_APP: ${{ secrets.GAPI_KEY_APP }}
          PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh
        with:
          ssh-key: ${{ secrets.SSH_ED25519 }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-user: ${{ secrets.SSH_USER }}
      - name: Rsync Scripts and HTML
        if: ${{ vars.HTML_DEST != '' && vars.ADMIN_DEST != '' }}
        run: |
          rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
          rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
        env:
          SCRIPT_SRC: ./packages/admin/build/static/scripts/admin/
          SCRIPT_DEST: ${{ vars.ADMIN_DEST }}
          HTML_SRC: ./packages/admin/build/admin.html
          HTML_DEST: ${{ vars.HTML_DEST }}

  web:
    runs-on: ubuntu-latest
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    needs: check-cache
    if: needs.check-cache.outputs.web-matched != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node and Common
        uses: ./.github/actions/setup-node-and-common
        with:
          node-version: 20.x
      - name: Web Install Deps and Build
        run: |
          yarn workspaces focus web
          yarn workspace web build
        env:
          GAPI_KEY_APP: ${{ secrets.GAPI_KEY_APP }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh
        with:
          ssh-key: ${{ secrets.SSH_ED25519 }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-user: ${{ secrets.SSH_USER }}
      - name: Rsync Scripts and HTML
        if: ${{ vars.HTML_DEST != '' && vars.WEB_DEST != '' }}
        run: |
          rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
          rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
        env:
          SCRIPT_SRC: ./packages/web/build/static/scripts/web/
          SCRIPT_DEST: ${{ vars.WEB_DEST }}
          HTML_SRC: ./packages/web/build/index.html
          HTML_DEST: ${{ vars.HTML_DEST }}

  server:
    runs-on: ubuntu-latest
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    needs: check-cache
    if: needs.check-cache.outputs.server-matched != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node and Common
        uses: ./.github/actions/setup-node-and-common
        with:
          node-version: 20.x
      - name: Server Install Deps and Build
        run: |
          yarn workspaces focus server
          yarn workspace server build
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh
        with:
          ssh-key: ${{ secrets.SSH_ED25519 }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-user: ${{ secrets.SSH_USER }}
      - name: Rsync Build Artifacts
        if: ${{ vars.BACKEND_DIR != '' }}
        run: |
          rsync --delete -rpivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx --files-from=$SYNC_FILE_LIST --exclude=.env $SRC server:$DEST
        env:
          SYNC_FILE_LIST: ${{ format('{0}/rsync-server-list', github.workspace) }}
          SRC: ${{ github.workspace }}
          DEST: ${{ vars.BACKEND_DIR }}
      - name: Install Deps on Server
        run: |
          ssh server $COMMAND
        env:
          COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && yarn workspaces focus server --production', vars.BACKEND_DIR) }}
      - name: Migrate Up
        run: |
          ssh server $COMMAND
        env:
          COMMAND: ${{ format('cd {0} && dbmate -d ./packages/server/migrations up', vars.BACKEND_DIR) }}
      - name: PM2 Start App
        run: |
          ssh server $COMMAND
        env:
          COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && pm2 start ecosystem.config.cjs', vars.BACKEND_DIR) }}

  save-cache:
    runs-on: ubuntu-latest
    needs: [check-cache, assets, web, server, admin]
    if: ${{ always() && contains(format('{0},{1},{2},{3}', needs.assets.result, needs.web.result, needs.server.result, needs.assets.result), 'success') }}
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    steps:
      - name: Write Cache
        run: |
          mkdir -p /tmp/.cache
          cat > /tmp/.cache/hashes << EOF
          {
            "admin": "$ADMIN",
            "web": "$WEB",
            "server": "$SERVER",
            "assets": "$ASSETS"
          }
          EOF
        env:
          ADMIN: ${{ needs.check-cache.outputs.admin-hash }}
          WEB: ${{ needs.check-cache.outputs.web-hash }}
          SERVER: ${{ needs.check-cache.outputs.server-hash }}
          ASSETS: ${{ needs.check-cache.outputs.assets-hash }}
      - name: Save Cache
        uses: actions/cache/save@v3
        with:
          path: /tmp/.cache
          key: hashes-${{ needs.check-cache.outputs.checksum }}
