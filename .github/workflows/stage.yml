name: Deploy Website to Staging

on:
  push:
    branches: [ "deploy" ]

jobs:
  check-and-cache-assets:
    runs-on: ubuntu-latest
    outputs:
      admin-changed: ${{ steps.first-check.outputs.admin || steps.second-check.outputs.admin }}
      web-changed: ${{ steps.first-check.outputs.web || steps.second-check.outputs.web }}
      assets-changed: ${{ steps.first-check.outputs.assets || steps.second-check.outputs.assets }}
      server-changed: ${{ steps.first-check.outputs.server || steps.second-check.outputs.server }}
    environment: ${{ vars.CURRENT_ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Cached Hashes
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ${{ runner.temp }}
          key: hashes
      - name: Handle no Cache
        id: first-check
        if: steps.cache.outputs.cache-hit == 'false'
        run: |
          echo "admin=true" >> $GITHUB_OUTPUT
          echo "web=true" >> $GITHUB_OUTPUT
          echo "assets=true" >> $GITHUB_OUTPUT
          echo "server=true" >> $GITHUB_OUTPUT
      - name: Get cached hashes
        id: get-hashes
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "admin=$(cat ${{ runner.temp }}/hashes | jq '.admin')" >> $GITHUB_OUTPUT
          echo "web=$(cat ${{ runner.temp }}/hashes | jq '.web')" >> $GITHUB_OUTPUT
          echo "server=$(cat ${{ runner.temp }}/hashes | jq '.server')" >> $GITHUB_OUTPUT
          echo "assets=$(cat ${{ runner.temp }}/hashes | jq '.assets')" >> $GITHUB_OUTPUT
      - name: Compute new hashes
        id: compute-hashes
        run: |
          echo "admin=$ADMIN" >> $GITHUB_OUTPUT
          echo "web=$WEB" >> $GITHUB_OUTPUT
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT
        env:
          ADMIN: ${{ hashFiles('packages/admin/**', 'yarn.lock') }}
          WEB: ${{ hashFiles('packages/web/**', 'yarn.lock') }}
          SERVER: ${{ hashFiles('packages/server/**', 'yarn.lock') }}
          ASSETS: ${{ hashFiles('assets/**', 'yarn.lock') }}
      - name: Handle yes Cache
        id: second-check
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "admin=$ADMIN" >> $GITHUB_OUTPUT
          echo "web=$WEB" >> $GITHUB_OUTPUT
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT
        env:
          ADMIN: ${{ steps.compute-hashes.admin == steps.get-hashes.admin }}
          WEB: ${{ steps.compute-hashes.web == steps.get-hashes.web }}
          SERVER: ${{ steps.compute-hashes.server == steps.get-hashes.server }}
          ASSETS: ${{ steps.compute-hashes.assets == steps.get-hashes.assets }}
      - name: Write Cache
        run: |
          cat > ${{ runner.temp }}/hashes << EOF
          {
            "admin": "$ADMIN"
            "web": "$WEB"
            "server": "$SERVER"
            "assets": "$ASSETS"
          }
          EOF
        env:
          ADMIN: ${{ steps.compute-hashes.admin }}
          WEB: ${{ steps.compute-hashes.web }}
          SERVER: ${{ steps.compute-hashes.server }}
          ASSETS: ${{ steps.compute-hashes.assets }}
      - name: Save Cache
        uses: actions/cache/save@v3
        with:
          path: ${{ runner.temp }}
          key: hashes

  # assets:
  #   runs-on: ubuntu-latest
  #   environment: ${{ vars.CURRENT_ENVIRONMENT }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Detect changes
  #       id: changes
  #       uses: dorny/paths-filter@v2
  #       with:
  #         filters: |
  #           assets:
  #             - ${{ github.workspace }}/assets/**
  #     - name: Early Exit
  #       if: ${{ steps.changes.outputs.assets == false }}
  #       run: |
  #         gh run cancel ${{ github.job }}
  #         gh run watch ${{ github.job }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup SSH
  #       uses: ./.github/actions/setup-ssh
  #       with:
  #         ssh-key: ${{ secrets.SSH_ED25519 }}
  #         ssh-host: ${{ secrets.SSH_HOST }}
  #         ssh-user: ${{ secrets.SSH_USER }}
  #     - name: Rsync Assets
  #       if: ${{ vars.ASSETS_DIR != '' }}
  #       run: |
  #         rsync -rpivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx --files-from=$SYNC_FILE_LIST $SRC server:$DEST
  #       env:
  #         SYNC_FILE_LIST: ${{ github.workspace }}/rsync-assets-list
  #         SRC: ${{ github.workspace }}/assets
  #         DEST: ${{ vars.ASSETS_DIR }}

  # admin:
  #   runs-on: ubuntu-latest
  #   environment: ${{ vars.CURRENT_ENVIRONMENT }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Detect changes
  #       id: changes
  #       uses: dorny/paths-filter@v2
  #       with:
  #         filters: |
  #           admin:
  #             - ${{ github.workspace }}/packages/admin/**
  #             - ${{ github.workspace }}/yarn.lock
  #             - ${{ github.workspace }}/package.json
  #             - ${{ github.workspace }}/.yarnrc.yml
  #     - name: Early Exit
  #       if: ${{ steps.changes.outputs.admin == false }}
  #       run: |
  #         gh run cancel ${{ github.job }}
  #         gh run watch ${{ github.job }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup Node and Common
  #       uses: ./.github/actions/setup-node-and-common
  #       with:
  #         node-version: 20.x
  #     - name: Admin Install Deps and Build
  #       run: |
  #         yarn workspaces focus admin
  #         yarn workspace admin build
  #       env:
  #         GAPI_KEY_APP: ${{ secrets.GAPI_KEY_APP }}
  #         PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
  #     - name: Setup SSH
  #       uses: ./.github/actions/setup-ssh
  #       with:
  #         ssh-key: ${{ secrets.SSH_ED25519 }}
  #         ssh-host: ${{ secrets.SSH_HOST }}
  #         ssh-user: ${{ secrets.SSH_USER }}
  #     - name: Rsync Scripts and HTML
  #       if: ${{ vars.HTML_DEST != '' && vars.ADMIN_DEST != '' }}
  #       run: |
  #         rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
  #         rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
  #       env:
  #         SCRIPT_SRC: ./packages/admin/build/static/scripts/admin/
  #         SCRIPT_DEST: ${{ vars.ADMIN_DEST }}
  #         HTML_SRC: ./packages/admin/build/admin.html
  #         HTML_DEST: ${{ vars.HTML_DEST }}

  # frontend:
  #   runs-on: ubuntu-latest
  #   environment: ${{ vars.CURRENT_ENVIRONMENT }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Detect changes
  #       id: changes
  #       uses: dorny/paths-filter@v2
  #       with:
  #         filters: |
  #           web:
  #             - ${{ github.workspace }}/packages/web/**
  #             - ${{ github.workspace }}/yarn.lock
  #             - ${{ github.workspace }}/package.json
  #             - ${{ github.workspace }}/.yarnrc.yml
  #     - name: Early Exit
  #       if: ${{ steps.changes.outputs.web == false }}
  #       run: |
  #         gh run cancel ${{ github.job }}
  #         gh run watch ${{ github.job }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup Node and Common
  #       uses: ./.github/actions/setup-node-and-common
  #       with:
  #         node-version: 20.x
  #     - name: Web Install Deps and Build
  #       run: |
  #         yarn workspaces focus web
  #         yarn workspace web build
  #       env:
  #         GAPI_KEY_APP: ${{ secrets.GAPI_KEY_APP }}
  #         STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
  #     - name: Setup SSH
  #       uses: ./.github/actions/setup-ssh
  #       with:
  #         ssh-key: ${{ secrets.SSH_ED25519 }}
  #         ssh-host: ${{ secrets.SSH_HOST }}
  #         ssh-user: ${{ secrets.SSH_USER }}
  #     - name: Rsync Scripts and HTML
  #       if: ${{ vars.HTML_DEST != '' && vars.WEB_DEST != '' }}
  #       run: |
  #         rsync --delete --dirs -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $SCRIPT_SRC server:$SCRIPT_DEST
  #         rsync -ivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx -p $HTML_SRC server:$HTML_DEST
  #       env:
  #         SCRIPT_SRC: ./packages/web/build/static/scripts/web/
  #         SCRIPT_DEST: ${{ vars.WEB_DEST }}
  #         HTML_SRC: ./packages/web/build/index.html
  #         HTML_DEST: ${{ vars.HTML_DEST }}

  # backend:
  #   runs-on: ubuntu-latest
  #   environment: ${{ vars.CURRENT_ENVIRONMENT }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Detect changes
  #       id: changes
  #       uses: dorny/paths-filter@v2
  #       with:
  #         filters: |
  #           server:
  #             - ${{ github.workspace }}/packages/server/**
  #             - ${{ github.workspace }}/yarn.lock
  #             - ${{ github.workspace }}/package.json
  #             - ${{ github.workspace }}/.yarnrc.yml
  #     - name: Early Exit
  #       if: ${{ steps.changes.outputs.admin == false }}
  #       run: |
  #         gh run cancel ${{ github.job }}
  #         gh run watch ${{ github.job }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Setup Node and Common
  #       uses: ./.github/actions/setup-node-and-common
  #       with:
  #         node-version: 20.x
  #     - name: Server Install Deps and Build
  #       run: |
  #         yarn workspaces focus server
  #         yarn workspace server build
  #     - name: Setup SSH
  #       uses: ./.github/actions/setup-ssh
  #       with:
  #         ssh-key: ${{ secrets.SSH_ED25519 }}
  #         ssh-host: ${{ secrets.SSH_HOST }}
  #         ssh-user: ${{ secrets.SSH_USER }}
  #     - name: Rsync Build Artifacts
  #       if: ${{ vars.BACKEND_DIR != '' }}
  #       run: |
  #         rsync --delete -rpivz --chown=deploy:www-data --chmod=Dg=rwx,Fg=rwx --files-from=$SYNC_FILE_LIST --exclude=.env $SRC server:$DEST
  #       env:
  #         SYNC_FILE_LIST: ${{ format('{0}/rsync-server-list', github.workspace) }}
  #         SRC: ${{ github.workspace }}
  #         DEST: ${{ vars.BACKEND_DIR }}
  #     - name: Install Deps on Server
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && yarn workspaces focus server --production', vars.BACKEND_DIR) }}
  #     - name: Migrate Up
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && dbmate -d ./packages/server/migrations up', vars.BACKEND_DIR) }}
  #     - name: PM2 Start App
  #       run: |
  #         ssh server $COMMAND
  #       env:
  #         COMMAND: ${{ format('cd {0} && . ~/.nvm/nvm.sh && nvm use 20 && pm2 start ecosystem.config.cjs', vars.BACKEND_DIR) }}


  # backend:
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: kamiyo/sycpiano:latest
      # - name: Setup SSH
      #   uses: ./.github/actions/setup-ssh
      #   with:
      #     ssh-key: ${{ secrets.SSH_ED25519 }}
      #     ssh-host: ${{ secrets.SSH_HOST }}
      #     ssh-user: ${{ secrets.SSH_USER }}
      # - name: Create Tunnel to DB
      #   run: ssh -fN -L 5432:localhost:5432 server
      # - name: Migration
      #   uses: addnab/docker-run-action@v3
      #   with:
      #     image: amacneil/dbmate
      #     options: -v ${{ github.workspace }}:/workspace --network=host -e DATABASE_URL
      #     run: |
      #       cd /workspace
      #       dbmate -d ./packages/server/migrations up
      #   env:
      #       DATABASE_URL: ${{ format('postgres://{0}:{1}@localhost:5432/{2}?sslmode=disable', secrets.DB_USER, secrets.DB_PASS, secrets.DB_NAME) }}
      # - name: Run docker compose pull and up and prune
      #   run: |
      #     ssh server $COMMAND
      #   env:
      #     COMMAND: ${{ format('cd {0} && docker compose pull && docker compose up -d && docker image prune -f', vars.COMPOSE_DIR) }}
