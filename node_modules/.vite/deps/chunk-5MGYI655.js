import {
  format,
  toDate,
  tzParseTimezone
} from "./chunk-53IWZXOL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// .yarn/cache/date-fns-npm-2.29.3-fef7e3c72c-e01cf5b62a.zip/node_modules/date-fns/_lib/assign/index.js
var require_assign = __commonJS({
  ".yarn/cache/date-fns-npm-2.29.3-fef7e3c72c-e01cf5b62a.zip/node_modules/date-fns/_lib/assign/index.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assign;
    function assign(target, object) {
      if (target == null) {
        throw new TypeError("assign requires that input parameter not be null or undefined");
      }
      for (var property in object) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
          ;
          target[property] = object[property];
        }
      }
      return target;
    }
    module.exports = exports.default;
  }
});

// .yarn/cache/date-fns-npm-2.29.3-fef7e3c72c-e01cf5b62a.zip/node_modules/date-fns/_lib/cloneObject/index.js
var require_cloneObject = __commonJS({
  ".yarn/cache/date-fns-npm-2.29.3-fef7e3c72c-e01cf5b62a.zip/node_modules/date-fns/_lib/cloneObject/index.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cloneObject2;
    var _index = _interopRequireDefault(require_assign());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function cloneObject2(object) {
      return (0, _index.default)({}, object);
    }
    module.exports = exports.default;
  }
});

// .yarn/__virtual__/date-fns-tz-virtual-9dc6787734/0/cache/date-fns-tz-npm-2.0.0-9b7996f292-a6553603a9.zip/node_modules/date-fns-tz/esm/formatInTimeZone/index.js
var import_cloneObject = __toESM(require_cloneObject());

// .yarn/__virtual__/date-fns-tz-virtual-9dc6787734/0/cache/date-fns-tz-npm-2.0.0-9b7996f292-a6553603a9.zip/node_modules/date-fns-tz/esm/utcToZonedTime/index.js
function utcToZonedTime(dirtyDate, timeZone, options) {
  var date = toDate(dirtyDate, options);
  var offsetMilliseconds = tzParseTimezone(timeZone, date, true);
  var d = new Date(date.getTime() - offsetMilliseconds);
  var resultDate = /* @__PURE__ */ new Date(0);
  resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
  resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
  return resultDate;
}

// .yarn/__virtual__/date-fns-tz-virtual-9dc6787734/0/cache/date-fns-tz-npm-2.0.0-9b7996f292-a6553603a9.zip/node_modules/date-fns-tz/esm/formatInTimeZone/index.js
function formatInTimeZone(date, timeZone, formatStr, options) {
  var extendedOptions = (0, import_cloneObject.default)(options);
  extendedOptions.timeZone = timeZone;
  return format(utcToZonedTime(date, timeZone), formatStr, extendedOptions);
}

export {
  require_cloneObject,
  utcToZonedTime,
  formatInTimeZone
};
//# sourceMappingURL=chunk-5MGYI655.js.map
