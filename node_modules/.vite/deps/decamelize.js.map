{
  "version": 3,
  "sources": ["../../../.yarn/cache/decamelize-npm-6.0.0-109b08ac0a-0066bc3079.zip/node_modules/decamelize/index.js"],
  "sourcesContent": ["const handlePreserveConsecutiveUppercase = (decamelized, separator) => {\n\t// Lowercase all single uppercase characters. As we\n\t// want to preserve uppercase sequences, we cannot\n\t// simply lowercase the separated string at the end.\n\t// `data_For_USACounties` → `data_for_USACounties`\n\tdecamelized = decamelized.replace(\n\t\t/((?<![\\p{Uppercase_Letter}\\d])[\\p{Uppercase_Letter}\\d](?![\\p{Uppercase_Letter}\\d]))/gu,\n\t\t$0 => $0.toLowerCase(),\n\t);\n\n\t// Remaining uppercase sequences will be separated from lowercase sequences.\n\t// `data_For_USACounties` → `data_for_USA_counties`\n\treturn decamelized.replace(\n\t\t/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t(_, $1, $2) => $1 + separator + $2.toLowerCase(),\n\t);\n};\n\nexport default function decamelize(\n\ttext,\n\t{\n\t\tseparator = '_',\n\t\tpreserveConsecutiveUppercase = false,\n\t} = {},\n) {\n\tif (!(typeof text === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError(\n\t\t\t'The `text` and `separator` arguments should be of type `string`',\n\t\t);\n\t}\n\n\t// Checking the second character is done later on. Therefore process shorter strings here.\n\tif (text.length < 2) {\n\t\treturn preserveConsecutiveUppercase ? text : text.toLowerCase();\n\t}\n\n\tconst replacement = `$1${separator}$2`;\n\n\t// Split lowercase sequences followed by uppercase character.\n\t// `dataForUSACounties` → `data_For_USACounties`\n\t// `myURLstring → `my_URLstring`\n\tconst decamelized = text.replace(\n\t\t/([\\p{Lowercase_Letter}\\d])(\\p{Uppercase_Letter})/gu,\n\t\treplacement,\n\t);\n\n\tif (preserveConsecutiveUppercase) {\n\t\treturn handlePreserveConsecutiveUppercase(decamelized, separator);\n\t}\n\n\t// Split multiple uppercase characters followed by one or more lowercase characters.\n\t// `my_URLstring` → `my_ur_lstring`\n\treturn decamelized\n\t\t.replace(\n\t\t\t/(\\p{Uppercase_Letter})(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t\treplacement,\n\t\t)\n\t\t.toLowerCase();\n}\n"],
  "mappings": ";;;AAAA,IAAM,qCAAqC,CAAC,aAAa,cAAc;AAKtE,gBAAc,YAAY;AAAA,IACzB,WAAC,6FAAoF,IAAE;AAAA,IACvF,QAAM,GAAG,YAAY;AAAA,EACtB;AAIA,SAAO,YAAY;AAAA,IAClB;AAAA,IACA,CAAC,GAAG,IAAI,OAAO,KAAK,YAAY,GAAG,YAAY;AAAA,EAChD;AACD;AAEe,SAAR,WACN,MACA;AAAA,EACC,YAAY;AAAA,EACZ,+BAA+B;AAChC,IAAI,CAAC,GACJ;AACD,MAAI,EAAE,OAAO,SAAS,YAAY,OAAO,cAAc,WAAW;AACjE,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAGA,MAAI,KAAK,SAAS,GAAG;AACpB,WAAO,+BAA+B,OAAO,KAAK,YAAY;AAAA,EAC/D;AAEA,QAAM,cAAc,KAAK;AAKzB,QAAM,cAAc,KAAK;AAAA,IACxB;AAAA,IACA;AAAA,EACD;AAEA,MAAI,8BAA8B;AACjC,WAAO,mCAAmC,aAAa,SAAS;AAAA,EACjE;AAIA,SAAO,YACL;AAAA,IACA;AAAA,IACA;AAAA,EACD,EACC,YAAY;AACf;",
  "names": []
}
