import {
  formatInTimeZone,
  require_cloneObject,
  utcToZonedTime
} from "./chunk-5MGYI655.js";
import {
  format,
  newDateUTC,
  toDate,
  tzParseTimezone,
  tzPattern_default
} from "./chunk-53IWZXOL.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// .yarn/__virtual__/date-fns-tz-virtual-9dc6787734/0/cache/date-fns-tz-npm-2.0.0-9b7996f292-a6553603a9.zip/node_modules/date-fns-tz/esm/getTimezoneOffset/index.js
function getTimezoneOffset(timeZone, date) {
  return -tzParseTimezone(timeZone, date);
}

// .yarn/__virtual__/date-fns-tz-virtual-9dc6787734/0/cache/date-fns-tz-npm-2.0.0-9b7996f292-a6553603a9.zip/node_modules/date-fns-tz/esm/zonedTimeToUtc/index.js
var import_cloneObject = __toESM(require_cloneObject(), 1);
function zonedTimeToUtc(date, timeZone, options) {
  if (typeof date === "string" && !date.match(tzPattern_default)) {
    var extendedOptions = (0, import_cloneObject.default)(options);
    extendedOptions.timeZone = timeZone;
    return toDate(date, extendedOptions);
  }
  var d = toDate(date, options);
  var utc = newDateUTC(
    d.getFullYear(),
    d.getMonth(),
    d.getDate(),
    d.getHours(),
    d.getMinutes(),
    d.getSeconds(),
    d.getMilliseconds()
  ).getTime();
  var offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));
  return new Date(utc + offsetMilliseconds);
}
export {
  format,
  formatInTimeZone,
  getTimezoneOffset,
  toDate,
  utcToZonedTime,
  zonedTimeToUtc
};
//# sourceMappingURL=date-fns-tz.js.map
