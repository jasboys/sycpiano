import {
  require_errors,
  require_hslToRgb,
  require_numberToHex,
  require_parseToRgb,
  require_reduceHexValue,
  require_rgb,
  require_rgba
} from "./chunk-N4C5LXNC.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_guard.js
var require_guard = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_guard.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function guard(lowerBoundary, upperBoundary, value) {
      return Math.max(lowerBoundary, Math.min(upperBoundary, value));
    }
    var _default = guard;
    exports["default"] = _default;
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_rgbToHsl.js
var require_rgbToHsl = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_rgbToHsl.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function rgbToHsl(color) {
      var red = color.red / 255;
      var green = color.green / 255;
      var blue = color.blue / 255;
      var max = Math.max(red, green, blue);
      var min = Math.min(red, green, blue);
      var lightness = (max + min) / 2;
      if (max === min) {
        if (color.alpha !== void 0) {
          return {
            hue: 0,
            saturation: 0,
            lightness,
            alpha: color.alpha
          };
        } else {
          return {
            hue: 0,
            saturation: 0,
            lightness
          };
        }
      }
      var hue;
      var delta = max - min;
      var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
      switch (max) {
        case red:
          hue = (green - blue) / delta + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / delta + 2;
          break;
        default:
          hue = (red - green) / delta + 4;
          break;
      }
      hue *= 60;
      if (color.alpha !== void 0) {
        return {
          hue,
          saturation,
          lightness,
          alpha: color.alpha
        };
      }
      return {
        hue,
        saturation,
        lightness
      };
    }
    var _default = rgbToHsl;
    exports["default"] = _default;
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/parseToHsl.js
var require_parseToHsl = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/parseToHsl.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = parseToHsl;
    var _parseToRgb = _interopRequireDefault(require_parseToRgb());
    var _rgbToHsl = _interopRequireDefault(require_rgbToHsl());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function parseToHsl(color) {
      return (0, _rgbToHsl["default"])((0, _parseToRgb["default"])(color));
    }
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_hslToHex.js
var require_hslToHex = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/internalHelpers/_hslToHex.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _hslToRgb = _interopRequireDefault(require_hslToRgb());
    var _reduceHexValue = _interopRequireDefault(require_reduceHexValue());
    var _numberToHex = _interopRequireDefault(require_numberToHex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function colorToHex(color) {
      return (0, _numberToHex["default"])(Math.round(color * 255));
    }
    function convertToHex(red, green, blue) {
      return (0, _reduceHexValue["default"])("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
    }
    function hslToHex(hue, saturation, lightness) {
      return (0, _hslToRgb["default"])(hue, saturation, lightness, convertToHex);
    }
    var _default = hslToHex;
    exports["default"] = _default;
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/hsl.js
var require_hsl = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/hsl.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = hsl;
    var _hslToHex = _interopRequireDefault(require_hslToHex());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function hsl(value, saturation, lightness) {
      if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number") {
        return (0, _hslToHex["default"])(value, saturation, lightness);
      } else if (typeof value === "object" && saturation === void 0 && lightness === void 0) {
        return (0, _hslToHex["default"])(value.hue, value.saturation, value.lightness);
      }
      throw new _errors["default"](1);
    }
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/hsla.js
var require_hsla = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/hsla.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = hsla;
    var _hslToHex = _interopRequireDefault(require_hslToHex());
    var _hslToRgb = _interopRequireDefault(require_hslToRgb());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function hsla(value, saturation, lightness, alpha) {
      if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number" && typeof alpha === "number") {
        return alpha >= 1 ? (0, _hslToHex["default"])(value, saturation, lightness) : "rgba(" + (0, _hslToRgb["default"])(value, saturation, lightness) + "," + alpha + ")";
      } else if (typeof value === "object" && saturation === void 0 && lightness === void 0 && alpha === void 0) {
        return value.alpha >= 1 ? (0, _hslToHex["default"])(value.hue, value.saturation, value.lightness) : "rgba(" + (0, _hslToRgb["default"])(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
      }
      throw new _errors["default"](2);
    }
    module.exports = exports.default;
  }
});

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/toColorString.js
var require_toColorString = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/toColorString.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = toColorString;
    var _hsl = _interopRequireDefault(require_hsl());
    var _hsla = _interopRequireDefault(require_hsla());
    var _rgb = _interopRequireDefault(require_rgb());
    var _rgba = _interopRequireDefault(require_rgba());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var isRgb = function isRgb2(color) {
      return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
    };
    var isRgba = function isRgba2(color) {
      return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && typeof color.alpha === "number";
    };
    var isHsl = function isHsl2(color) {
      return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
    };
    var isHsla = function isHsla2(color) {
      return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && typeof color.alpha === "number";
    };
    function toColorString(color) {
      if (typeof color !== "object")
        throw new _errors["default"](8);
      if (isRgba(color))
        return (0, _rgba["default"])(color);
      if (isRgb(color))
        return (0, _rgb["default"])(color);
      if (isHsla(color))
        return (0, _hsla["default"])(color);
      if (isHsl(color))
        return (0, _hsl["default"])(color);
      throw new _errors["default"](8);
    }
    module.exports = exports.default;
  }
});

export {
  require_guard,
  require_parseToHsl,
  require_toColorString
};
//# sourceMappingURL=chunk-I43TCHHO.js.map
