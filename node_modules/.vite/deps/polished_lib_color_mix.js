import {
  require_curry
} from "./chunk-NJP5R4B4.js";
import {
  require_parseToRgb,
  require_rgba
} from "./chunk-N4C5LXNC.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// .yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/mix.js
var require_mix = __commonJS({
  ".yarn/cache/polished-npm-4.2.2-eb3d423b8d-97fb927dc5.zip/node_modules/polished/lib/color/mix.js"(exports, module) {
    exports.__esModule = true;
    exports["default"] = void 0;
    var _curry = _interopRequireDefault(require_curry());
    var _rgba = _interopRequireDefault(require_rgba());
    var _parseToRgb = _interopRequireDefault(require_parseToRgb());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function mix(weight, color, otherColor) {
      if (color === "transparent")
        return otherColor;
      if (otherColor === "transparent")
        return color;
      if (weight === 0)
        return otherColor;
      var parsedColor1 = (0, _parseToRgb["default"])(color);
      var color1 = _extends({}, parsedColor1, {
        alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
      });
      var parsedColor2 = (0, _parseToRgb["default"])(otherColor);
      var color2 = _extends({}, parsedColor2, {
        alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
      });
      var alphaDelta = color1.alpha - color2.alpha;
      var x = parseFloat(weight) * 2 - 1;
      var y = x * alphaDelta === -1 ? x : x + alphaDelta;
      var z = 1 + x * alphaDelta;
      var weight1 = (y / z + 1) / 2;
      var weight2 = 1 - weight1;
      var mixedColor = {
        red: Math.floor(color1.red * weight1 + color2.red * weight2),
        green: Math.floor(color1.green * weight1 + color2.green * weight2),
        blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
        alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight))
      };
      return (0, _rgba["default"])(mixedColor);
    }
    var curriedMix = (0, _curry["default"])(mix);
    var _default = curriedMix;
    exports["default"] = _default;
    module.exports = exports.default;
  }
});
export default require_mix();
//# sourceMappingURL=polished_lib_color_mix.js.map
