import {
  createSelector,
  createStructuredSelector
} from "./chunk-MRHF37IY.js";
import "./chunk-DFKQJ226.js";

// .yarn/__virtual__/re-reselect-virtual-631b8fdbd2/0/cache/re-reselect-npm-4.0.1-133a1771fe-6acb302c5a.zip/node_modules/re-reselect/es/index.js
function isStringOrNumber(value) {
  return typeof value === "string" || typeof value === "number";
}
var FlatObjectCache = function() {
  function FlatObjectCache2() {
    this._cache = {};
  }
  var _proto = FlatObjectCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache[key] = selectorFn;
  };
  _proto.get = function get(key) {
    return this._cache[key];
  };
  _proto.remove = function remove(key) {
    delete this._cache[key];
  };
  _proto.clear = function clear() {
    this._cache = {};
  };
  _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {
    return isStringOrNumber(cacheKey);
  };
  return FlatObjectCache2;
}();
var defaultCacheCreator = FlatObjectCache;
var defaultCacheKeyValidator = function defaultCacheKeyValidator2() {
  return true;
};
function createCachedSelector() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return function(polymorphicOptions, legacyOptions) {
    if (legacyOptions) {
      throw new Error('[re-reselect] "options" as second argument is not supported anymore. Please provide an option object as single argument.');
    }
    var options = typeof polymorphicOptions === "function" ? {
      keySelector: polymorphicOptions
    } : Object.assign({}, polymorphicOptions);
    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : [].concat(funcs);
    var resultFuncWithRecomputations = function resultFuncWithRecomputations2() {
      recomputations++;
      return resultFunc.apply(void 0, arguments);
    };
    funcs.push(resultFuncWithRecomputations);
    var cache = options.cacheObject || new defaultCacheCreator();
    var selectorCreator = options.selectorCreator || createSelector;
    var isValidCacheKey = cache.isValidCacheKey || defaultCacheKeyValidator;
    if (options.keySelectorCreator) {
      options.keySelector = options.keySelectorCreator({
        keySelector: options.keySelector,
        inputSelectors: dependencies,
        resultFunc
      });
    }
    var selector = function selector2() {
      var cacheKey = options.keySelector.apply(options, arguments);
      if (isValidCacheKey(cacheKey)) {
        var cacheResponse = cache.get(cacheKey);
        if (cacheResponse === void 0) {
          cacheResponse = selectorCreator.apply(void 0, funcs);
          cache.set(cacheKey, cacheResponse);
        }
        return cacheResponse.apply(void 0, arguments);
      }
      console.warn('[re-reselect] Invalid cache key "' + cacheKey + '" has been returned by keySelector function.');
      return void 0;
    };
    selector.getMatchingSelector = function() {
      var cacheKey = options.keySelector.apply(options, arguments);
      return cache.get(cacheKey);
    };
    selector.removeMatchingSelector = function() {
      var cacheKey = options.keySelector.apply(options, arguments);
      cache.remove(cacheKey);
    };
    selector.clearCache = function() {
      cache.clear();
    };
    selector.resultFunc = resultFunc;
    selector.dependencies = dependencies;
    selector.cache = cache;
    selector.recomputations = function() {
      return recomputations;
    };
    selector.resetRecomputations = function() {
      return recomputations = 0;
    };
    selector.keySelector = options.keySelector;
    return selector;
  };
}
function createStructuredCachedSelector(selectors) {
  return createStructuredSelector(selectors, createCachedSelector);
}
function validateCacheSize(cacheSize) {
  if (cacheSize === void 0) {
    throw new Error('Missing the required property "cacheSize".');
  }
  if (!Number.isInteger(cacheSize) || cacheSize <= 0) {
    throw new Error('The "cacheSize" property must be a positive integer value.');
  }
}
var FifoObjectCache = function() {
  function FifoObjectCache2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, cacheSize = _ref.cacheSize;
    validateCacheSize(cacheSize);
    this._cache = {};
    this._cacheOrdering = [];
    this._cacheSize = cacheSize;
  }
  var _proto = FifoObjectCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache[key] = selectorFn;
    this._cacheOrdering.push(key);
    if (this._cacheOrdering.length > this._cacheSize) {
      var earliest = this._cacheOrdering[0];
      this.remove(earliest);
    }
  };
  _proto.get = function get(key) {
    return this._cache[key];
  };
  _proto.remove = function remove(key) {
    var index = this._cacheOrdering.indexOf(key);
    if (index > -1) {
      this._cacheOrdering.splice(index, 1);
    }
    delete this._cache[key];
  };
  _proto.clear = function clear() {
    this._cache = {};
    this._cacheOrdering = [];
  };
  _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {
    return isStringOrNumber(cacheKey);
  };
  return FifoObjectCache2;
}();
var LruObjectCache = function() {
  function LruObjectCache2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, cacheSize = _ref.cacheSize;
    validateCacheSize(cacheSize);
    this._cache = {};
    this._cacheOrdering = [];
    this._cacheSize = cacheSize;
  }
  var _proto = LruObjectCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache[key] = selectorFn;
    this._registerCacheHit(key);
    if (this._cacheOrdering.length > this._cacheSize) {
      var earliest = this._cacheOrdering[0];
      this.remove(earliest);
    }
  };
  _proto.get = function get(key) {
    this._registerCacheHit(key);
    return this._cache[key];
  };
  _proto.remove = function remove(key) {
    this._deleteCacheHit(key);
    delete this._cache[key];
  };
  _proto.clear = function clear() {
    this._cache = {};
    this._cacheOrdering = [];
  };
  _proto._registerCacheHit = function _registerCacheHit(key) {
    this._deleteCacheHit(key);
    this._cacheOrdering.push(key);
  };
  _proto._deleteCacheHit = function _deleteCacheHit(key) {
    var index = this._cacheOrdering.indexOf(key);
    if (index > -1) {
      this._cacheOrdering.splice(index, 1);
    }
  };
  _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {
    return isStringOrNumber(cacheKey);
  };
  return LruObjectCache2;
}();
var FlatMapCache = function() {
  function FlatMapCache2() {
    this._cache = /* @__PURE__ */ new Map();
  }
  var _proto = FlatMapCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache.set(key, selectorFn);
  };
  _proto.get = function get(key) {
    return this._cache.get(key);
  };
  _proto.remove = function remove(key) {
    this._cache["delete"](key);
  };
  _proto.clear = function clear() {
    this._cache.clear();
  };
  return FlatMapCache2;
}();
var FifoMapCache = function() {
  function FifoMapCache2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, cacheSize = _ref.cacheSize;
    validateCacheSize(cacheSize);
    this._cache = /* @__PURE__ */ new Map();
    this._cacheSize = cacheSize;
  }
  var _proto = FifoMapCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache.set(key, selectorFn);
    if (this._cache.size > this._cacheSize) {
      var earliest = this._cache.keys().next().value;
      this.remove(earliest);
    }
  };
  _proto.get = function get(key) {
    return this._cache.get(key);
  };
  _proto.remove = function remove(key) {
    this._cache["delete"](key);
  };
  _proto.clear = function clear() {
    this._cache.clear();
  };
  return FifoMapCache2;
}();
var LruMapCache = function() {
  function LruMapCache2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, cacheSize = _ref.cacheSize;
    validateCacheSize(cacheSize);
    this._cache = /* @__PURE__ */ new Map();
    this._cacheSize = cacheSize;
  }
  var _proto = LruMapCache2.prototype;
  _proto.set = function set(key, selectorFn) {
    this._cache.set(key, selectorFn);
    if (this._cache.size > this._cacheSize) {
      var earliest = this._cache.keys().next().value;
      this.remove(earliest);
    }
  };
  _proto.get = function get(key) {
    var value = this._cache.get(key);
    if (this._cache.has(key)) {
      this.remove(key);
      this._cache.set(key, value);
    }
    return value;
  };
  _proto.remove = function remove(key) {
    this._cache["delete"](key);
  };
  _proto.clear = function clear() {
    this._cache.clear();
  };
  return LruMapCache2;
}();
export {
  FifoMapCache,
  FifoObjectCache,
  FlatMapCache,
  FlatObjectCache,
  LruMapCache,
  LruObjectCache,
  createCachedSelector,
  createStructuredCachedSelector,
  createCachedSelector as default
};
//# sourceMappingURL=re-reselect.js.map
