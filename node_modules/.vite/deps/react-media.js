import {
  require_browser
} from "./chunk-NINRQW2Q.js";
import {
  require_prop_types
} from "./chunk-TVSZ7VUC.js";
import {
  _extends
} from "./chunk-CKPJJEGV.js";
import "./chunk-CZTP4XO4.js";
import {
  require_react
} from "./chunk-NA5ZIJWE.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// .yarn/cache/string-convert-npm-0.2.1-f1a42cb9ea-1098b1d8e3.zip/node_modules/string-convert/camel2hyphen.js
var require_camel2hyphen = __commonJS({
  ".yarn/cache/string-convert-npm-0.2.1-f1a42cb9ea-1098b1d8e3.zip/node_modules/string-convert/camel2hyphen.js"(exports, module) {
    var camel2hyphen = function(str) {
      return str.replace(/[A-Z]/g, function(match) {
        return "-" + match.toLowerCase();
      }).toLowerCase();
    };
    module.exports = camel2hyphen;
  }
});

// .yarn/cache/json2mq-npm-0.2.0-aa8a6516b9-5672c3abdd.zip/node_modules/json2mq/index.js
var require_json2mq = __commonJS({
  ".yarn/cache/json2mq-npm-0.2.0-aa8a6516b9-5672c3abdd.zip/node_modules/json2mq/index.js"(exports, module) {
    var camel2hyphen = require_camel2hyphen();
    var isDimension = function(feature) {
      var re = /[height|width]$/;
      return re.test(feature);
    };
    var obj2mq = function(obj) {
      var mq = "";
      var features = Object.keys(obj);
      features.forEach(function(feature, index) {
        var value = obj[feature];
        feature = camel2hyphen(feature);
        if (isDimension(feature) && typeof value === "number") {
          value = value + "px";
        }
        if (value === true) {
          mq += feature;
        } else if (value === false) {
          mq += "not " + feature;
        } else {
          mq += "(" + feature + ": " + value + ")";
        }
        if (index < features.length - 1) {
          mq += " and ";
        }
      });
      return mq;
    };
    var json2mq2 = function(query) {
      var mq = "";
      if (typeof query === "string") {
        return query;
      }
      if (query instanceof Array) {
        query.forEach(function(q, index) {
          mq += obj2mq(q);
          if (index < query.length - 1) {
            mq += ", ";
          }
        });
        return mq;
      }
      return obj2mq(query);
    };
    module.exports = json2mq2;
  }
});

// .yarn/__virtual__/react-media-virtual-9abb8fc861/0/cache/react-media-npm-2.0.0-rc.1-2383162389-66b073adb7.zip/node_modules/react-media/esm/react-media.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_invariant = __toESM(require_browser());
var import_json2mq = __toESM(require_json2mq());
var MediaQueryListener = function() {
  function MediaQueryListener2(targetWindow, query, listener) {
    var _this = this;
    this.nativeMediaQueryList = targetWindow.matchMedia(query);
    this.active = true;
    this.cancellableListener = function() {
      _this.matches = _this.nativeMediaQueryList.matches;
      if (_this.active) {
        listener.apply(void 0, arguments);
      }
    };
    this.nativeMediaQueryList.addListener(this.cancellableListener);
    this.matches = this.nativeMediaQueryList.matches;
  }
  var _proto = MediaQueryListener2.prototype;
  _proto.cancel = function cancel() {
    this.active = false;
    this.nativeMediaQueryList.removeListener(this.cancellableListener);
  };
  return MediaQueryListener2;
}();
var checkInvariants = function checkInvariants2(_ref) {
  var query = _ref.query, queries = _ref.queries, defaultMatches = _ref.defaultMatches;
  !(!(!query && !queries) || query && queries) ? true ? (0, import_invariant.default)(false, '<Media> must be supplied with either "query" or "queries"') : (0, import_invariant.default)(false) : void 0;
  !(defaultMatches === void 0 || !query || typeof defaultMatches === "boolean") ? true ? (0, import_invariant.default)(false, "<Media> when query is set, defaultMatches must be a boolean, received " + typeof defaultMatches) : (0, import_invariant.default)(false) : void 0;
  !(defaultMatches === void 0 || !queries || typeof defaultMatches === "object") ? true ? (0, import_invariant.default)(false, "<Media> when queries is set, defaultMatches must be a object of booleans, received " + typeof defaultMatches) : (0, import_invariant.default)(false) : void 0;
};
var wrapInQueryObject = function wrapInQueryObject2(query) {
  return {
    __DEFAULT__: query
  };
};
var unwrapSingleQuery = function unwrapSingleQuery2(queryObject) {
  var queryNames = Object.keys(queryObject);
  if (queryNames.length === 1 && queryNames[0] === "__DEFAULT__") {
    return queryObject.__DEFAULT__;
  }
  return queryObject;
};
var useMedia = function useMedia2(_ref2) {
  var query = _ref2.query, queries = _ref2.queries, defaultMatches = _ref2.defaultMatches, targetWindow = _ref2.targetWindow, onChange = _ref2.onChange;
  checkInvariants({
    query,
    queries,
    defaultMatches
  });
  var activeQueries = (0, import_react.useRef)([]);
  var getMatches = function getMatches2() {
    var result = activeQueries.current.reduce(function(acc, _ref3) {
      var _extends2;
      var name = _ref3.name, mqListener = _ref3.mqListener;
      return _extends({}, acc, (_extends2 = {}, _extends2[name] = mqListener.matches, _extends2));
    }, {});
    return unwrapSingleQuery(result);
  };
  var updateMatches = function updateMatches2() {
    setMatches(getMatches());
  };
  var setUpMQLs = function setUpMQLs2() {
    var activeTargetWindow = targetWindow || window;
    !(typeof activeTargetWindow.matchMedia === "function") ? true ? (0, import_invariant.default)(false, "<Media targetWindow> does not support `matchMedia`.") : (0, import_invariant.default)(false) : void 0;
    var queryObject = queries || wrapInQueryObject(query);
    activeQueries.current = Object.keys(queryObject).map(function(name) {
      var currentQuery = queryObject[name];
      var qs = typeof currentQuery !== "string" ? (0, import_json2mq.default)(currentQuery) : currentQuery;
      var mqListener = new MediaQueryListener(activeTargetWindow, qs, updateMatches);
      return {
        name,
        mqListener
      };
    });
  };
  var _useState = (0, import_react.useState)(function() {
    if (typeof window !== "object") {
      if (defaultMatches !== void 0) {
        return defaultMatches;
      }
      if (query) {
        return true;
      }
      return Object.keys(queries).reduce(function(acc, key) {
        var _extends3;
        return _extends({}, acc, (_extends3 = {}, _extends3[key] = true, _extends3));
      }, {});
    }
    setUpMQLs();
    return getMatches();
  }), matches = _useState[0], setMatches = _useState[1];
  (0, import_react.useEffect)(
    // Because setup happens in the state constructor, cleanup is the only thing that
    // useEffect is responsible for.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    function() {
      return function() {
        return activeQueries.current.forEach(function(_ref4) {
          var mqListener = _ref4.mqListener;
          return mqListener.cancel();
        });
      };
    },
    []
  );
  (0, import_react.useEffect)(
    // Set up a separate listener for onChange since we ideally want to fire onChange
    // after flushes, rather than having to insert it synchronously before an update happens.
    function() {
      if (onChange) {
        onChange(matches);
      }
    },
    [matches, onChange]
  );
  return matches;
};
var Media = function Media2(_ref5) {
  var defaultMatches = _ref5.defaultMatches, query = _ref5.query, queries = _ref5.queries, render = _ref5.render, children = _ref5.children, targetWindow = _ref5.targetWindow, onChange = _ref5.onChange;
  var matches = useMedia({
    query,
    queries,
    defaultMatches,
    targetWindow,
    onChange
  });
  var isAnyMatches = typeof matches === "object" ? Object.keys(matches).some(function(key) {
    return matches[key];
  }) : matches;
  return render ? isAnyMatches ? render(matches) : null : children ? typeof children === "function" ? children(matches) : !Array.isArray(children) || children.length ? (
    // Preact defaults to empty children array
    isAnyMatches ? import_react.default.Children.only(children) && typeof import_react.default.Children.only(children).type === "string" ? import_react.default.Children.only(children) : import_react.default.cloneElement(import_react.default.Children.only(children), {
      matches
    }) : null
  ) : null : null;
};
var queryType = import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.arrayOf(import_prop_types.default.object.isRequired)]);
Media.propTypes = {
  defaultMatches: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.objectOf(import_prop_types.default.bool)]),
  query: queryType,
  queries: import_prop_types.default.objectOf(queryType),
  render: import_prop_types.default.func,
  children: import_prop_types.default.oneOfType([import_prop_types.default.node, import_prop_types.default.func]),
  targetWindow: import_prop_types.default.object,
  onChange: import_prop_types.default.func
};
var react_media_default = Media;
export {
  react_media_default as default,
  useMedia
};
//# sourceMappingURL=react-media.js.map
