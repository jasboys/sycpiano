import { LoadStrategy, MikroORM, ReflectMetadataProvider } from "@mikro-orm/core";
import { PostgreSqlDriver, PostgreSqlPlatform } from "@mikro-orm/postgresql";
import * as dotenv from "dotenv";
dotenv.config({
    override: true
});
import config from "./config/config.js";
const { databaseUrl } = config;
class FixedPlatform extends PostgreSqlPlatform {
    getFullTextWhereClause(prop) {
        if (prop.columnTypes[0] === 'tsvector') {
            return `:column: @@ to_tsquery('en', :query)`;
        }
        return `to_tsvector('simple', :column:) @@ plainto_tsquery('simple', :query)`;
    }
}
export class FixedPostgresql extends PostgreSqlDriver {
    platform = new FixedPlatform;
}
console.log(process.cwd());
const orm = await MikroORM.init({
    entities: [
        'packages/server/build/models'
    ],
    entitiesTs: [
        'packages/server/src/models'
    ],
    metadataProvider: ReflectMetadataProvider,
    clientUrl: databaseUrl,
    debug: true,
    driver: FixedPostgresql,
    loadStrategy: LoadStrategy.JOINED
});
export default orm;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlQcm9wZXJ0eSwgTG9hZFN0cmF0ZWd5LCBNaWtyb09STSwgUmVmbGVjdE1ldGFkYXRhUHJvdmlkZXIgfSBmcm9tICdAbWlrcm8tb3JtL2NvcmUnO1xyXG5pbXBvcnQgeyBQb3N0Z3JlU3FsRHJpdmVyLCBQb3N0Z3JlU3FsUGxhdGZvcm0gfSBmcm9tICdAbWlrcm8tb3JtL3Bvc3RncmVzcWwnO1xyXG5cclxuaW1wb3J0ICogYXMgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcbmRvdGVudi5jb25maWcoeyBvdmVycmlkZTogdHJ1ZSB9KTtcclxuXHJcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcvY29uZmlnLmpzJztcclxuXHJcbmNvbnN0IHtcclxuICAgIGRhdGFiYXNlVXJsXHJcbn0gPSBjb25maWc7XHJcblxyXG5jbGFzcyBGaXhlZFBsYXRmb3JtIGV4dGVuZHMgUG9zdGdyZVNxbFBsYXRmb3JtIHtcclxuICAgIG92ZXJyaWRlIGdldEZ1bGxUZXh0V2hlcmVDbGF1c2UocHJvcDogRW50aXR5UHJvcGVydHkpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChwcm9wLmNvbHVtblR5cGVzWzBdID09PSAndHN2ZWN0b3InKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgOmNvbHVtbjogQEAgdG9fdHNxdWVyeSgnZW4nLCA6cXVlcnkpYDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBgdG9fdHN2ZWN0b3IoJ3NpbXBsZScsIDpjb2x1bW46KSBAQCBwbGFpbnRvX3RzcXVlcnkoJ3NpbXBsZScsIDpxdWVyeSlgO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRml4ZWRQb3N0Z3Jlc3FsIGV4dGVuZHMgUG9zdGdyZVNxbERyaXZlciB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGxhdGZvcm0gPSBuZXcgRml4ZWRQbGF0Zm9ybTtcclxufVxyXG5cclxuY29uc29sZS5sb2cocHJvY2Vzcy5jd2QoKSk7XHJcblxyXG5jb25zdCBvcm0gPSBhd2FpdCBNaWtyb09STS5pbml0PEZpeGVkUG9zdGdyZXNxbD4oe1xyXG4gICAgZW50aXRpZXM6IFsncGFja2FnZXMvc2VydmVyL2J1aWxkL21vZGVscyddLFxyXG4gICAgZW50aXRpZXNUczogWydwYWNrYWdlcy9zZXJ2ZXIvc3JjL21vZGVscyddLFxyXG4gICAgbWV0YWRhdGFQcm92aWRlcjogUmVmbGVjdE1ldGFkYXRhUHJvdmlkZXIsXHJcbiAgICBjbGllbnRVcmw6IGRhdGFiYXNlVXJsLFxyXG4gICAgZGVidWc6IHRydWUsXHJcbiAgICBkcml2ZXI6IEZpeGVkUG9zdGdyZXNxbCxcclxuICAgIGxvYWRTdHJhdGVneTogTG9hZFN0cmF0ZWd5LkpPSU5FRFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG9ybTsiXSwibmFtZXMiOlsiTG9hZFN0cmF0ZWd5IiwiTWlrcm9PUk0iLCJSZWZsZWN0TWV0YWRhdGFQcm92aWRlciIsIlBvc3RncmVTcWxEcml2ZXIiLCJQb3N0Z3JlU3FsUGxhdGZvcm0iLCJkb3RlbnYiLCJjb25maWciLCJvdmVycmlkZSIsImRhdGFiYXNlVXJsIiwiRml4ZWRQbGF0Zm9ybSIsImdldEZ1bGxUZXh0V2hlcmVDbGF1c2UiLCJwcm9wIiwiY29sdW1uVHlwZXMiLCJGaXhlZFBvc3RncmVzcWwiLCJwbGF0Zm9ybSIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiY3dkIiwib3JtIiwiaW5pdCIsImVudGl0aWVzIiwiZW50aXRpZXNUcyIsIm1ldGFkYXRhUHJvdmlkZXIiLCJjbGllbnRVcmwiLCJkZWJ1ZyIsImRyaXZlciIsImxvYWRTdHJhdGVneSIsIkpPSU5FRCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBeUJBLFlBQVksRUFBRUMsUUFBUSxFQUFFQyx1QkFBdUIsUUFBUSxrQkFBa0I7QUFDbEcsU0FBU0MsZ0JBQWdCLEVBQUVDLGtCQUFrQixRQUFRLHdCQUF3QjtBQUU3RSxZQUFZQyxZQUFZLFNBQVM7QUFDakNBLE9BQU9DLE1BQU0sQ0FBQztJQUFFQyxVQUFVO0FBQUs7QUFFL0IsT0FBT0QsWUFBWSxxQkFBcUI7QUFFeEMsTUFBTSxFQUNGRSxXQUFXLEVBQ2QsR0FBR0Y7QUFFSixNQUFNRyxzQkFBc0JMO0lBQ2ZNLHVCQUF1QkMsSUFBb0IsRUFBVTtRQUMxRCxJQUFJQSxLQUFLQyxXQUFXLENBQUMsRUFBRSxLQUFLLFlBQVk7WUFDcEMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO1FBQ2pEO1FBRUEsT0FBTyxDQUFDLG9FQUFvRSxDQUFDO0lBQ2pGO0FBQ0o7QUFFQSxPQUFPLE1BQU1DLHdCQUF3QlY7SUFDZFcsV0FBVyxJQUFJTCxjQUFjO0FBQ3BEO0FBRUFNLFFBQVFDLEdBQUcsQ0FBQ0MsUUFBUUMsR0FBRztBQUV2QixNQUFNQyxNQUFNLE1BQU1sQixTQUFTbUIsSUFBSSxDQUFrQjtJQUM3Q0MsVUFBVTtRQUFDO0tBQStCO0lBQzFDQyxZQUFZO1FBQUM7S0FBNkI7SUFDMUNDLGtCQUFrQnJCO0lBQ2xCc0IsV0FBV2hCO0lBQ1hpQixPQUFPO0lBQ1BDLFFBQVFiO0lBQ1JjLGNBQWMzQixhQUFhNEIsTUFBTTtBQUNyQztBQUVBLGVBQWVULElBQUkifQ==